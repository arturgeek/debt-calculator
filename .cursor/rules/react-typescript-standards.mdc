# React TypeScript Coding Standards

## Component Structure
- Use functional components with hooks
- Define TypeScript interfaces for all props
- Use PascalCase for component names
- Use camelCase for variables and functions
- Export components as named exports

## State Management
- Use React hooks (useState, useEffect) for local state
- Define proper TypeScript types for state
- Use React Query for server state when needed

## File Organization
- Components in `/src/components/`
- Pages in `/src/pages/`
- Custom hooks in `/src/hooks/`
- Utilities in `/src/lib/`
- UI components in `/src/components/ui/`

## Import Patterns
- Use absolute imports with `@/` prefix
- Group imports: React, external libraries, internal components, types
- Import UI components from `@/components/ui/`

## Example Component Structure
```typescript
import React, { useState } from 'react';
import { ComponentName } from '@/components/ui/component-name';

interface ComponentProps {
  // Define props here
}

export const ComponentName: React.FC<ComponentProps> = ({ prop1, prop2 }) => {
  const [state, setState] = useState<StateType>(initialValue);
  
  return (
    // JSX here
  );
};
```
description:
globs:
alwaysApply: false
---
